#!/usr/bin/python

from  __future__ import print_function

# manipulating and writing data
import os
import numpy as np
import shutil
import sys
import json
from cv_bridge import CvBridge
import cv2

# ROS Messages
import rospy
import message_filters
from sensor_msgs.msg import Image
from geometry_msgs.msg import QuaternionStamped
from tensegrity.msg import MotorsStamped, SensorsStamped
from phasespace.msg import Markers

# other
import argparse

# shape reconstruction
from calc_Node_Pos_cable_len_errors import *
from Tensegrity_model_inputs import *

#initial values for the node positions
inNodes_3 = np.array([[0.000, 0.000, 0.0000], [-113.00, 0.000, -219.00], [-56.00, 130.00, 0.000], [5.00, 10.00, -200.00], 
[-100.00, 0.000, 0.000], [-50.00, 100.00, -200.00]])

class SyncDataWriter:

    def __init__(self, output_dir='output'):
        self.bridge = CvBridge()
        self.depth_scale = 1000  # D435

        self.depth_topic = "/depth_images"
        self.color_topic = "/rgb_images"
        self.control_topic = "/control_msg"
        self.strain_topic = "/strain_msg"
        self.imu_topic = "/imu_msg"
        self.mocap_topic = "/phasespace_markers"
        color_im_sub = message_filters.Subscriber(self.color_topic, Image)
        depth_im_sub = message_filters.Subscriber(self.depth_topic, Image)
        control_sub = message_filters.Subscriber(self.control_topic, MotorsStamped)
        strain_sub = message_filters.Subscriber(self.strain_topic, SensorsStamped)
        imu_sub = message_filters.Subscriber(self.imu_topic, QuaternionStamped)
        mocap_sub = message_filters.Subscriber(self.mocap_topic, Markers)

        if calibration:
            # time synchronizer
            self.time_synchornizer = message_filters.ApproximateTimeSynchronizer([strain_sub,imu_sub,mocap_sub], queue_size=10, slop=0.1,allow_headerless=True)
            self.time_synchornizer.registerCallback(self.calibration_callback)
        else:
            # time synchronizer
            self.time_synchornizer = message_filters.ApproximateTimeSynchronizer([color_im_sub,depth_im_sub,control_sub,strain_sub,imu_sub,mocap_sub], queue_size=5, slop=0.3,allow_headerless=True)
            self.time_synchornizer.registerCallback(self.callback)

        # output dirs
        self.color_dir = os.path.join(output_dir, 'color')
        self.depth_dir = os.path.join(output_dir, 'depth')
        self.stamp_dir = os.path.join(output_dir, 'data')
        if os.path.exists(output_dir):
            shutil.rmtree(output_dir)
        os.mkdir(output_dir)
        os.mkdir(self.color_dir)
        os.mkdir(self.depth_dir)
        os.mkdir(self.stamp_dir)

        self.count = 0

    def callback(self, color_msg, depth_msg, control_msg, strain_msg, imu_msg, mocap_msg):
        global inNodes_3
        print("Received synchronized data", self.count)

        color_im = self.bridge.imgmsg_to_cv2(color_msg, 'rgb8')
        depth_im = self.bridge.imgmsg_to_cv2(depth_msg, 'mono16')
        cv2.imwrite(os.path.join(self.color_dir, str(self.count).zfill(4) + ".png"), color_im)
        cv2.imwrite(os.path.join(self.depth_dir, str(self.count).zfill(4) + ".png"), depth_im)

        # calculate state reconstruction lengths in mm 
        values = np.array([sensor.length*10 for sensor in strain_msg.sensors])
        array = calculateNodePositions(inNodes_3,inPairs_3, values)

        # format syncronized data
        data = {}
        data['header'] = {'seq':control_msg.header.seq,'secs':control_msg.header.stamp.to_sec()}
        data['motors'] = {}
        for motor in control_msg.motors:
            data['motors'][motor.id] = {'target':motor.target,'position':motor.position,'speed':motor.speed,'done':motor.done}
        data['sensors'] = {}
        for sensor in strain_msg.sensors:
            data['sensors'][sensor.id] = {'length':sensor.length,'capacitance':sensor.capacitance}
        data['imu'] = {'x':imu_msg.quaternion.x,'y':imu_msg.quaternion.y,'z':imu_msg.quaternion.z,'w':imu_msg.quaternion.w}
        data['mocap'] = {}
        for marker in mocap_msg.markers:
            if marker.cond == -1:
                data['mocap'][marker.id] = None
            else:
                data['mocap'][marker.id] = {'x':marker.x,'y':marker.y,'z':marker.z}
                # data['mocap'][marker.id] = (marker.x,marker.y,marker.z)
        data['state reconstruction'] = {node:xyz for node,xyz in enumerate(array)}

        # write data to file
        json.dump(data,open(os.path.join(self.stamp_dir, str(self.count).zfill(4) + ".json"),'w'))

        # # write the control information
        # with open(os.path.join(self.stamp_dir, str(self.count).zfill(4) + ".txt"), 'w') as f:
        #     f.write(str(control_msg.header.seq) + '\n')
        #     f.write(str(control_msg.header.stamp.to_sec()) + '\n')
        #     f.write(str(control_msg.pose.position.x) + ',' + str(control_msg.pose.position.y) + ',' + str(control_msg.pose.position.z) + '\n')
        #     f.write(str(control_msg.pose.orientation.x) + ',' + str(control_msg.pose.orientation.y) + ',' + str(control_msg.pose.orientation.z) + '\n')
        #     f.write(str(control_msg.pose.orientation.x) + '\n')
        #     f.write('\n'.join(','.join(str(n) for n in xyz) for xyz in array))

        inNodes_3 = np.array(array)

        self.count += 1

    def calibration_callback(self, strain_msg, imu_msg, mocap_msg):
        # global inNodes_3
        print("Received synchronized data", self.count)

        # format syncronized data
        data = {}
        data['header'] = {'seq':strain_msg.header.seq,'secs':strain_msg.header.stamp.to_sec()}
        data['sensors'] = {}
        for sensor in strain_msg.sensors:
            data['sensors'][sensor.id] = {'length':sensor.length,'capacitance':sensor.capacitance}
        data['imu'] = {'x':imu_msg.quaternion.x,'y':imu_msg.quaternion.y,'z':imu_msg.quaternion.z,'w':imu_msg.quaternion.w}
        data['mocap'] = {}
        for marker in mocap_msg.markers:
            if marker.cond == -1:
                data['mocap'][marker.id] = None
            else:
                data['mocap'][marker.id] = {'x':marker.x,'y':marker.y,'z':marker.z}

        # write data to file
        json.dump(data,open(os.path.join(self.stamp_dir, str(self.count).zfill(4) + ".json"),'w'))

        # # write the control information
        # with open(os.path.join(self.stamp_dir, str(self.count).zfill(4) + ".txt"), 'w') as f:
        #     f.write(str(control_msg.header.seq) + '\n')
        #     f.write(str(control_msg.header.stamp.to_sec()) + '\n')
        #     f.write(str(control_msg.pose.position.x) + ',' + str(control_msg.pose.position.y) + ',' + str(control_msg.pose.position.z) + '\n')
        #     f.write(str(control_msg.pose.orientation.x) + ',' + str(control_msg.pose.orientation.y) + ',' + str(control_msg.pose.orientation.z) + '\n')
        #     f.write(str(control_msg.pose.orientation.x) + '\n')
        #     f.write('\n'.join(','.join(str(n) for n in xyz) for xyz in array))

        # inNodes_3 = np.array(array)

        self.count += 1

    def run(self, rate):
        print("SyncDataWriter started! Waiting for messages.")
        while not rospy.is_shutdown():
            rate.sleep()


if __name__ == '__main__':

    # parser = argparse.ArgumentParser()
    # parser.add_argument('--calibration',action='store_true')
    # args = parser.parse_args()
    # calibration = args.calibration
    calibration = False

    rospy.init_node('motoman_perception')
    rate = rospy.Rate(30)
    if len(sys.argv) > 1:
        writer = SyncDataWriter(output_dir=sys.argv[1])
    else:
        writer = SyncDataWriter(output_dir='output')
    writer.run(rate)